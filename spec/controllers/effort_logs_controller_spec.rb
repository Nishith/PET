require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe EffortLogsController do

  # This should return the minimal set of attributes required to create a valid
  # EffortLog. As you add validations to EffortLog, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :date => Date.today,
      :effort => 12.0,
      :user_id => 1,
      :project_phase_deliverable => Factory(:project_phase_deliverable)
    }
  end

  before(:each) do
    @admin = Factory(:admin)
    sign_in @admin
  end

  describe "GET index" do
    it "assigns recent logged against deliverables as @recent_deliverables" do
      Factory(:effort_log)
      recent_deliverables = ProjectPhaseDeliverable.recently_logged
      get :index
      assigns(:recent_deliverables).should eq(recent_deliverables)
    end
  end

  describe "GET show" do
    it "assigns the requested effort_log as @effort_log" do
      effort_log = EffortLog.create! valid_attributes
      get :show, :id => effort_log.id.to_s
      assigns(:effort_log).should eq(effort_log)
    end
  end

  describe "GET new" do
    it "assigns a new effort_log as @effort_log" do
      get :new
      assigns(:effort_log).should be_a_new(EffortLog)
    end
  end

  describe "GET edit" do
    it "assigns the requested effort_log as @effort_log" do
      effort_log = EffortLog.create! valid_attributes
      get :edit, :id => effort_log.id.to_s
      assigns(:effort_log).should eq(effort_log)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new EffortLog" do
        expect {
          post :create, :effort_log => valid_attributes
        }.to change(EffortLog, :count).by(1)
      end

      it "assigns a newly created effort_log as @effort_log" do
        post :create, :effort_log => valid_attributes
        assigns(:effort_log).should be_a(EffortLog)
        assigns(:effort_log).should be_persisted
      end

      it "redirects to the created effort_log" do
        post :create, :effort_log => valid_attributes
        response.should redirect_to(:action => "index_by_project", :controller => "effort_logs",
                                    :id => EffortLog.last.project_phase_deliverable.project_phase.project)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved effort_log as @effort_log" do
        # Trigger the behavior that occurs when invalid params are submitted
        EffortLog.any_instance.stub(:save).and_return(false)
        post :create, :effort_log => {}
        assigns(:effort_log).should be_a_new(EffortLog)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        EffortLog.any_instance.stub(:save).and_return(false)
        post :create, :effort_log => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested effort_log" do
        effort_log = EffortLog.create! valid_attributes
        # Assuming there are no other effort_logs in the database, this
        # specifies that the EffortLog created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        EffortLog.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => effort_log.id, :effort_log => {'these' => 'params'}
      end

      it "assigns the requested effort_log as @effort_log" do
        effort_log = EffortLog.create! valid_attributes
        put :update, :id => effort_log.id, :effort_log => valid_attributes
        assigns(:effort_log).should eq(effort_log)
      end

      it "redirects to the effort_log" do
        effort_log = EffortLog.create! valid_attributes
        put :update, :id => effort_log.id, :effort_log => valid_attributes
        effort_log = EffortLog.find(effort_log.id)
        response.should redirect_to(:action => "index_by_project", :controller => "effort_logs",
                                    :id => effort_log.project_phase_deliverable.project_phase.project)
      end
    end

    describe "with invalid params" do
      it "assigns the effort_log as @effort_log" do
        effort_log = EffortLog.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        EffortLog.any_instance.stub(:save).and_return(false)
        put :update, :id => effort_log.id.to_s, :effort_log => {}
        assigns(:effort_log).should eq(effort_log)
      end

      it "re-renders the 'edit' template" do
        effort_log = EffortLog.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        EffortLog.any_instance.stub(:save).and_return(false)
        put :update, :id => effort_log.id.to_s, :effort_log => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested effort_log" do
      effort_log = EffortLog.create! valid_attributes
      expect {
        delete :destroy, :id => effort_log.id.to_s
      }.to change(EffortLog, :count).by(-1)
    end

    it "redirects to the effort_logs list" do
      effort_log = EffortLog.create! valid_attributes
      delete :destroy, :id => effort_log.id.to_s
      response.should redirect_to(effort_logs_url)
    end
  end

end
